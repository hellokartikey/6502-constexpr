#include <chrono>
#include <iostream>
#include "core.h"

// #define constexpr
#include "cpu.h"

int main() {
  std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();

  constexpr uint8_t till = 0x1f;
  constexpr cpu6502 cpu = [till] {
    cpu6502 cpu;
    cpu.load_program({0xa9, 0x00, 0x8d, 0x00, 0x12, 0x8d, 0x01, 0x12, 0xe8, 0xa9, 0x01, 0x8d, 0x02, 0x12, 0xa9, 0x00, 0x8d, 0x03, 0x12, 0xa9, 0x00, 0x85, 0x02, 0x85, 0x03, 0xa9, 0x01, 0x85, 0x04, 0xa9, 0x00, 0x85, 0x05, 0xa9, 0x04, 0x85, 0x00, 0xa9, 0x12, 0x85, 0x01, 0x18, 0xa5, 0x02, 0x65, 0x04, 0x85, 0x06, 0xa5, 0x03, 0x65, 0x05, 0x85, 0x07, 0xa0, 0x00, 0xa5, 0x06, 0x91, 0x00, 0xc8, 0xa5, 0x07, 0x91, 0x00, 0xa5, 0x04, 0x85, 0x02, 0xa5, 0x05, 0x85, 0x03, 0xa5, 0x06, 0x85, 0x04, 0xa5, 0x07, 0x85, 0x05, 0x18, 0xa5, 0x00, 0x69, 0x02, 0x85, 0x00, 0xa5, 0x01, 0x69, 0x00, 0x85, 0x01, 0xa5, 0x01, 0xc9, 0xff, 0xb0, 0x03, 0x4c, 0x29, 0x10, 0x02});
    cpu.exec_until_hlt();
    return cpu;
  }();
  volatile cpu6502 another = cpu;

  std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();

  std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[Âµs]" << std::endl;
}
